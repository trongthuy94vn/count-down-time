{"version":3,"sources":["components.js","constants.js","App.js","serviceWorker.js","index.js","bg.jpg"],"names":["GlobalStyle","createGlobalStyle","bg","Container","styled","div","Title","h2","Wrapper","Box","props","content","SECOND","MINUTE","HOUR","DAY","App","gap","Date","getTime","useState","countDate","setCountDate","days","Math","floor","hours","minutes","seconds","useEffect","time","setInterval","clearInterval","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"kyDAGO,IAAMA,EAAcC,YAAH,IAQIC,KAMfC,EAAYC,IAAOC,IAAV,IAMIH,KASbI,EAAQF,IAAOG,GAAV,KAcLC,EAAUJ,IAAOC,IAAV,KAKPI,EAAML,IAAOC,IAAV,KAYA,SAAAK,GAAK,OAAIA,EAAMC,WC/DlBC,EAAS,IACTC,EAAkB,GAATD,EACTE,EAAgB,GAATD,EACPE,EAAa,GAAPD,ECsCJE,MArCf,WACE,IAEIC,EAFS,IAAIC,KAAK,0BAA0BC,WACtC,IAAID,MAAOC,UAFR,EAIqBC,mBAASH,GAJ9B,mBAINI,EAJM,KAIKC,EAJL,KAMPC,EAAOC,KAAKC,MAAMJ,EAAYN,GAC9BW,EAAQF,KAAKC,MAAOJ,EAAYN,EAAOD,GACvCa,EAAUH,KAAKC,MAAOJ,EAAYP,EAAQD,GAC1Ce,EAAUJ,KAAKC,MAAOJ,EAAYR,EAAUD,GAUlD,OARAiB,qBAAU,WACR,IAAMC,EAAOC,aAAY,WACvBT,EAAaD,EAAY,OACxB,KACH,OAAO,WACLW,cAAcF,MAEf,CAACT,IAEF,oCACE,kBAACrB,EAAD,MACA,kBAACG,EAAD,KACE,kBAACG,EAAD,KACE,6DADF,QAGA,kBAACE,EAAD,KACE,kBAACC,EAAD,CAAKE,QAAQ,QAAQY,GACrB,kBAACd,EAAD,CAAKE,QAAQ,SAASe,GACtB,kBAACjB,EAAD,CAAKE,QAAQ,WAAWgB,GACxB,kBAAClB,EAAD,CAAKE,QAAQ,WAAWiB,OCtBdK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBErInBC,EAAOC,QAAU,IAA0B,iC","file":"static/js/main.21a9e095.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from \"styled-components\";\r\nimport bg from \"./bg.jpg\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    * {\r\n    margin:0;\r\n    padding:0;\r\n    font-family: 'Dancing Script', cursive;\r\n    }\r\n  body {\r\n    color: #000;\r\n    background-image: url(${bg});\r\n    background-attachment: fixed;\r\n    background-blend-mode:hard-light;\r\n  }\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  position: absolute;\r\n  top: 80px;\r\n  left: 100px;\r\n  right: 100px;\r\n  bottom: 80px;\r\n  background-image: url(${bg});\r\n  background-attachment: fixed;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  box-shadow: 0 50px 50px rgba(0, 0, 0, 0.5), 0 0 0 100px rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  text-align: center;\r\n  font-size: 10em;\r\n  line-height: 0.7em;\r\n  color: #333;\r\n\r\n  span {\r\n    display: block;\r\n    font-weight: 300;\r\n    letter-spacing: 6px;\r\n    font-size: 0.2em;\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  margin-top: 50px;\r\n`;\r\n\r\nexport const Box = styled.div`\r\n  position: relative;\r\n  width: 100px;\r\n  height: 100px;\r\n  line-height: 100px;\r\n  text-align: center;\r\n  background-color: #333;\r\n  color: #fff;\r\n  margin: 0 15px;\r\n  font-size:2rem;\r\n  \r\n  :before {\r\n    content: '${props => props.content}';\r\n    position: absolute;\r\n    bottom: -30px;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 50px;\r\n    background: #ff0;\r\n    color: #333;\r\n    font-size: 1.35rem;\r\n    line-height: 50px;\r\n  }\r\n`;\r\n","export const SECOND = 1000;\r\nexport const MINUTE = SECOND * 60;\r\nexport const HOUR = MINUTE * 60;\r\nexport const DAY = HOUR * 24;\r\n","import React, { useState, useEffect } from \"react\";\nimport { GlobalStyle, Container, Title, Wrapper, Box } from \"./components\";\nimport { DAY, MINUTE, SECOND, HOUR } from \"./constants\";\n\nfunction App() {\n  const date = new Date(\"Jan 25, 2020 00:00:00 \").getTime();\n  let now = new Date().getTime();\n  let gap = date - now;\n  const [countDate, setCountDate] = useState(gap);\n\n  const days = Math.floor(countDate / DAY);\n  const hours = Math.floor((countDate % DAY) / HOUR);\n  const minutes = Math.floor((countDate % HOUR) / MINUTE);\n  const seconds = Math.floor((countDate % MINUTE) / SECOND);\n\n  useEffect(() => {\n    const time = setInterval(() => {\n      setCountDate(countDate - 1000);\n    }, 1000);\n    return () => {\n      clearInterval(time);\n    };\n  }, [countDate]);\n  return (\n    <>\n      <GlobalStyle />\n      <Container>\n        <Title>\n          <span>Countdown to Lunar New Year</span>2020\n        </Title>\n        <Wrapper>\n          <Box content=\"Days\">{days}</Box>\n          <Box content=\"Hours\">{hours}</Box>\n          <Box content=\"Minutes\">{minutes}</Box>\n          <Box content=\"Seconds\">{seconds}</Box>\n        </Wrapper>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bg.c40d7b88.jpg\";"],"sourceRoot":""}